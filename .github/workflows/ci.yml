name: 🚀 AI Swarm IDE CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks weekly
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: "3.9"
  PYTHON_VERSIONS: "3.9, 3.10, 3.11, 3.12"

jobs:
  # 🧪 Test Suite
  test:
    name: 🧪 Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/base.txt

    - name: 🧹 Run linting
      run: |
        echo "🔍 Running Black..."
        black --check --diff src tests
        echo "🔍 Running isort..."
        isort --check-only --diff src tests
        echo "🔍 Running flake8..."
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "🔍 Running mypy..."
        mypy src --ignore-missing-imports

    - name: 🧪 Run tests with coverage
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --cov-fail-under=90 \
          --durations=10 \
          --tb=short

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 🔒 Security & Quality
  security:
    name: 🔒 Security & Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pre-commit

    - name: 🔍 Run Bandit security scan
      run: |
        bandit -r src -f json -o bandit-report.json || true
        bandit -r src -f txt -o bandit-report.txt

    - name: 🛡️ Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --text --output safety-report.txt

    - name: 📋 Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt

  # ⚡ Performance Benchmarks
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/base.txt

    - name: 🏃‍♂️ Run performance benchmarks
      run: |
        python -m pytest tests/performance/ --benchmark-only --benchmark-sort=mean

    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .benchmarks/

  # 🚀 Build & Package
  build:
    name: 🚀 Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🏗️ Build package
      run: |
        python -m build

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # 🌐 Documentation
  docs:
    name: 🌐 Build Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install sphinx sphinx-rtd-theme

    - name: 📚 Build documentation
      run: |
        cd docs
        make html

    - name: 📤 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # 🎯 Notifications (Optional - requires SLACK_WEBHOOK_URL secret)
  # To enable Slack notifications, add SLACK_WEBHOOK_URL to your repository secrets
  # Go to Settings > Secrets and variables > Actions > New repository secret
  notify:
    name: 🎯 Notifications
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: 📧 Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ AI Swarm IDE CI failed! Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 🎉 Notify on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ AI Swarm IDE CI passed! Ready for deployment.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
